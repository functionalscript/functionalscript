# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: CI

on:
  push:
    branches:
    - master
  pull_request:

# See supported Node.js release schedule at https://nodejs.org/en/about/releases/
jobs:
  node20:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/setup-node@v2
      with:
        node-version: 20
    # checkout
    - uses: actions/checkout@v2
    - run: npm ci
    - run: npm run test20
    - run: node --test

  node22:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/setup-node@v2
      with:
        node-version: 22
    # checkout
    - uses: actions/checkout@v2
    - run: npm ci
    - run: npm run test22
    - run: node --test --experimental-strip-types

  node:
    strategy:
      matrix:
        os: ['ubuntu-latest', 'windows-latest']
        node-version: [24]

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
    # checkout
    - uses: actions/checkout@v2
    - run: npm ci
    - run: npm test
    - run: node --test
    - run: npx tsgo # check types using TypeScript native-preview
    - run: npm run index
    - run: npm pack

  node-bin:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/setup-node@v2
      with:
        node-version: 20
    # checkout
    - uses: actions/checkout@v2
    - run: npm ci
    - run: npm pack
    - run: npm install -g ./*.tgz
    - run: fsc
      continue-on-error: true
    - run: fst
    - uses: actions/upload-artifact@v4
      with:
        path: ./*.tgz

  deno:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        deno-version: [2]

    steps:
    - uses: denoland/setup-deno@v1
      with:
        deno-version: ${{ matrix.deno-version }}
    # checkout
    - uses: actions/checkout@v2
    - run: deno install
    - run: deno task fst
    - run: deno task test
    - run: deno publish --dry-run

  bun:

    runs-on: ubuntu-latest

    steps:
    - uses: oven-sh/setup-bun@v1
    - uses: actions/checkout@v2
    - run: bun ./dev/tf/module.ts
    - run: bun test

  rust:
    strategy:
      matrix:
        # https://docs.github.com/en/actions/using-jobs/choosing-the-runner-for-a-job#choosing-github-hosted-runners
        os: ['ubuntu-latest', 'windows-latest', 'macos-latest', 'ubuntu-24.04-arm', 'windows-11-arm']
        type: ['', '--release']
        target: ['']
        include:
          - os: windows-latest
            target: '--target i686-pc-windows-msvc'

    runs-on: ${{ matrix.os }}

    steps:
    # Windows on ARM has no Rust installed.
    - if: ${{ matrix.os == 'windows-11-arm' }}
      run: |
        Invoke-WebRequest -Uri https://win.rustup.rs/ -OutFile rustup-init.exe
        .\rustup-init.exe -y --default-toolchain stable --profile minimal
        echo "$env:USERPROFILE\.cargo\bin" | Out-File -Append -FilePath $env:GITHUB_PATH
    - uses: actions/checkout@v3
    - run: cargo test ${{ matrix.type }} ${{ matrix.target }}

  rust-wasm:
    strategy:
      matrix:
        type: ['', '--release']
    runs-on: ubuntu-latest
    steps:
      - run: rustup update
      - uses: actions/setup-node@v2
        with:
          node-version: 20
      - uses: taiki-e/install-action@wasm-pack
      # checkout
      - uses: actions/checkout@v4
      - run: wasm-pack test --node ${{ matrix.type }} ./nanvm-lib

  rust-lints:
    runs-on: ubuntu-latest
    steps:
      - run: rustup update
      # checkout
      - uses: actions/checkout@v3
      - run: cargo clippy -- -D warnings
      - run: cargo fmt -- --check
